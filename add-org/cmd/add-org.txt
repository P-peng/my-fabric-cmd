#
# 版本 1.4.4
# 全局域名 baolijinglight.com
# 基于 first-network 启动
# 基于 org3-artifacts 添加
# 在其它机器动态添加 org 组织节点
# 要求，额外挂载 config 文件架
#

一、产生 组织3 加密资料
1.进入子目录，新机器
cd org3-artifacts

2.生成组织3密钥文件
../../bin/cryptogen generate --config=./org3-crypto.yaml

3. 提取组织3所需json文件
export FABRIC_CFG_PATH=$PWD && ../../bin/configtxgen -printOrg Org3MSP > ../channel-artifacts/org3.json

4. 复制crypto-config目录，主要是需要各个节点tls证书
cd ../ && cp -r crypto-config/ordererOrganizations org3-artifacts/crypto-config/

5. 将org3.json文件 复制到新机器

二、 修改系统配置通道，旧机器

1.进入 cli
docker exec -it cli bash
mkdir -p config/system

2.导入变量
export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/baolijinglight.com/orderers/orderer.baolijinglight.com/msp/tlscacerts/tlsca.baolijinglight.com-cert.pem
export CHANNEL_NAME=mychannel

3.输入环境变量确认
echo $ORDERER_CA && echo $CHANNEL_NAME

4.获取配置块
peer channel fetch config config/system/config_block.pb -o orderer.baolijinglight.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA

5.将配置块转换为json
configtxlator proto_decode --input config/system/config_block.pb --type common.Block | jq .data.data[0].payload.data.config >  config/system/config.json

6.将msp3写入文件
jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups": {"Org3MSP":.[1]}}}}}' config/system/config.json ./channel-artifacts/org3.json > config/system/modified_config.json

7. 将未修改config.json 翻译成 config.pb
configtxlator proto_encode --input config/system/config.json --type common.Config --output config/system/config.pb

8. 将修改过得 modified_config.json 翻译成 modified_config.pb
configtxlator proto_encode --input config/system/modified_config.json --type common.Config --output config/system/modified_config.pb

9. 比较  config.pb 和 modified_config.pb的差异，生成 org3_update.pb 块
configtxlator compute_update --channel_id $CHANNEL_NAME --original config/system/config.pb --updated config/system/modified_config.pb --output config/system/org3_update.pb

10. 将差异块转换成json
configtxlator proto_decode --input config/system/org3_update.pb --type common.ConfigUpdate | jq . > config/system/org3_update.json

11. 将通道写入json文件
echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat config/system/org3_update.json)'}}}' | jq . > config/system/org3_update_in_envelope.json

12. 将已写入的json文件转换成pb文件
configtxlator proto_encode --input config/system/org3_update_in_envelope.json --type common.Envelope --output config/system/org3_update_in_envelope.pb

13. 签名，（org1和org2都要签名，若org1签名了，切换org2环境变量，则不需要签名了）
peer channel signconfigtx -f config/system/org3_update_in_envelope.pb

14. 切换org2环境变量
export CORE_PEER_LOCALMSPID="Org2MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.baolijinglight.com/peers/peer0.org2.baolijinglight.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.baolijinglight.com/users/Admin@org2.baolijinglight.com/msp
export CORE_PEER_ADDRESS=peer0.org2.baolijinglight.com:9051

15. 提交交易（广播）
peer channel update -f config/system/org3_update_in_envelope.pb -c $CHANNEL_NAME -o orderer.baolijinglight.com:7050 --tls --cafile $ORDERER_CA

二、 将 org3 加入通道
1. 启动
docker-compose -f docker-compose-org3.yaml up -d

2.进入cli3
docker exec -it Org3cli bash

3.导入环境变量：ORDERER_CA和CHANNEL_NAME
export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/baolijinglight.com/orderers/orderer.baolijinglight.com/msp/tlscacerts/tlsca.baolijinglight.com-cert.pem
export CHANNEL_NAME=mychannel
echo $ORDERER_CA && echo $CHANNEL_NAME

4.检索通道块
peer channel fetch 0 mychannel.block -o orderer.baolijinglight.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA

5.加入区块
peer channel join -b mychannel.block

6.组织3对等节点加入区块
export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.baolijinglight.com/peers/peer1.org3.baolijinglight.com/tls/ca.crt && export CORE_PEER_ADDRESS=peer1.org3.baolijinglight.com:8051
peer channel join -b mychannel.block

三、升级调用链码，可以使用自己的链码

1. 安装链码（可考虑所有的节点都安装）
peer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/

2.回去旧机器的cli，安装新链码
peer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/

3.切换peer0.org1身份
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.baolijinglight.com/peers/peer0.org1.baolijinglight.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.baolijinglight.com/users/Admin@org1.baolijinglight.com/msp
export CORE_PEER_ADDRESS=peer0.org1.baolijinglight.com:7051

4.org1安装链码（可考虑所有的节点都安装）
peer chaincode install -n mycc -v 2.0 -p github.com/chaincode/chaincode_example02/go/

5.升级链码（有可能环境变量为空的，会出现错误）
peer chaincode upgrade -o orderer.baolijinglight.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 2.0 -c '{"Args":["init","a","90","b","210"]}' -P "OR ('Org1MSP.peer','Org2MSP.peer','Org3MSP.peer')"

6.测试查询，cli/org3cli都行
peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","a"]}'

7. 调用链码背书转账，cli/org3cli都行
peer chaincode invoke -o orderer.baolijinglight.com:7050  --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -c '{"Args":["invoke","a","b","10"]}'


四、更新频道锚点链接（org3cli），新机器
1. 获取配置块
docker exec -it Org3cli bash
mkdir config/mychcnnel
peer channel fetch config config/mychcnnel/config_block.pb -o orderer2.baolijinglight.com:7050 -c $CHANNEL_NAME --tls --cafile $ORDERER_CA

2. 将配置块转换成json
configtxlator proto_decode --input config/mychcnnel/config_block.pb --type common.Block | jq .data.data[0].payload.data.config > config/mychcnnel/config.json

3.写入锚点
jq '.channel_group.groups.Application.groups.Org3MSP.values += {"AnchorPeers":{"mod_policy": "Admins","value":{"anchor_peers": [{"host": "peer0.org3.baolijinglight.com","port": 7051}]},"version": "0"}}' config/mychcnnel/config.json > config/mychcnnel/modified_anchor_config.json

4. 转换
configtxlator proto_encode --input config/mychcnnel/config.json --type common.Config --output config/mychcnnel/config.pb

5. 转换
configtxlator proto_encode --input config/mychcnnel/modified_anchor_config.json --type common.Config --output config/mychcnnel/modified_anchor_config.pb

6. 计算块差异
configtxlator compute_update --channel_id $CHANNEL_NAME --original config/mychcnnel/config.pb --updated config/mychcnnel/modified_anchor_config.pb --output config/mychcnnel/anchor_update.pb

7. 差异块转换json
configtxlator proto_decode --input config/mychcnnel/anchor_update.pb --type common.ConfigUpdate | jq . > config/mychcnnel/anchor_update.json

8. 将新的消息加入进去
echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat config/mychcnnel/anchor_update.json)'}}}' | jq . > config/mychcnnel/anchor_update_in_envelope.json

9. 转换
configtxlator proto_encode --input config/mychcnnel/anchor_update_in_envelope.json --type common.Envelope --output config/mychcnnel/anchor_update_in_envelope.pb

10. 广播
peer channel update -f config/mychcnnel/anchor_update_in_envelope.pb -c $CHANNEL_NAME -o orderer.baolijinglight.com:7050 --tls --cafile $ORDERER_CA

11. 查看peer0.org1.baolijinglight.com日志
docker logs -f peer0.org1.baolijinglight.com





